x 1.Extrair GridView
x 2.Instalar Provider
x 3.Explicar Provider/ChangeNotifier (padrão Observer)
x 4.Estender ProductProvider com ChangeNotifier

x 5.Marcar o produto como favorito
  - Estender Product com ChangeNotifier
  - Wrap ProductTile com ChangeNotifierProvider (usar param 'create')
  - ProductTile: onPressed -> product.toggleFavorite()

x 6.ChangeNotifierProvider.value
  - ProductGrid -> diferença entre 'create' e 'value'

x 7.ProductTile
  - Usar 'Consumer', alternativa ao Provider.of()
  - Wrap ClipRRect com Consumer
  - Provider.of(_,listen: true/false)

x 8.Menu Favoritos/Todos
  - Scaffold.actions = [PopupMenuButton()]
  - PopupMenuButton(itemBuilder: () => PopupMenuItem(value:0))
  - Filtrar favoritos em ProductProvider (gerenciamento global)
  - Filtrar favoritos localmente (Statefull)
  - Substituir menu por ícone de favoritos

x 9. Carrinho e item do Carrinho
  - Definir modelos Cart e CartItem
  - Métodos para valor do carrinho, qtde de itens, etc
  - Disponibilizar o carrinho na árvore (ChangeNotiferProvider x MultiProvider)
  - Adicionar produto no carrinho ao clicar no ícone
  - Adicionar ícone do carrinho no AppBar

x 10. Criar badge sobre o ícone de carrinho
  - Criar Badge widget (value, child, color)
  - Usar Stack (align.center)
  - Posicionar o child do Badge com Positioned (8,8)
  - Usar Container para exibir e estilizar o valor (accentColor)
  - Usar constrains para limitar Container (16,16)
  - Atualizar badge quando o estado do carrinho mudar (Wrap Badge com Consumer)
  - Apresentar total do carrinho com toolTip

x 11. Tela do Carrinho
  - Criar esqueleto da página (CartPage)
  - Inserir rota e navegação para a página
  - Usar Card, Chip e Spacer
  - Criar lista de itens do carrinho com ListView.builder()

x 12. Item do carrinho CartItem
  - Criar como ListTile
    . title, subtitle, trailing: Text
    . leading: CircleAvatar(child: FittedBox)
  - Wrap ListTile with Card

x 13. Remoção do item do carrinho
  - Warp Card with Dismissible
  - Definir direction do Dismissible
  - Definir cor de fundo do Dismissible
  - Remover produto do carrinho

x 14. Pedido
  - Criar modelo OrderModel
  - Criar provider OrderProvider
    . Criar método addOrder
  - Registrar provider OrderProvider
  - Criar pedido ao clicar no botão "COMPRAR"

x 15. Detalhe de produto (ProductDetailPage)
  - Wrap com SingleChildScrollview
  - Título com nome do produto
  - Coluna com imagem, preço e descrição

x 16. Drawer
  - Criar o widget AppDrawer
    . Loja
    . Pedidos
  - Incluir AppDrawer em OrderPage e ProductOverviewPage

x 17. Página de pedidos
  - Criar OrderPage
  - Criar nova rota '/orders'
  - ListView de OrderItem
  - OrderItem = Card + ListTile
  - Função de expandir/retrair o OrderItem

x 18. Melhoramentos
  - Snackbar para confirmar adição de produto no carrinho
  - Confirmação antes de remover item do carrinho (showDialog)

x 19. Gerenciamento de produtos
  - Criar ProductManagerPage
  - Criar rota '/productManager'
  - Adicionar item 'Gerenciar Produtos' no AppDrawer
  - Adicional AppDrawer em ProductManagerPage
  - Criar lista de produtos com ListView e ListTile
  - Criar ProductItem como item de ListView
    . botão de edição
    . botão de remoção
  - Criar ação de criar produto no AppBar

x 20. Cadastro/Alteração de Produtos
  - Criar ProductPage
  - Criar rota '/productForm'
  - Criar formulário de edição
  - Inserir controle de foco
  - Dispose objects
  - Editar produtos

# IMAGENS
https://m.media-amazon.com/images/I/61AjRsLcIXL._AC_SX569_.jpg

x 21. Requisições HTTP
  - Tipos de armazenamento de dados: local / remoto
    . local: persistência, offine, apenas no dispositivo
    . remoto: persistência, online, múltiplos usuários, internet
  - Conexão com banco de dados
    . local ou remoto
    . remoto: é recomendável usar uma API (web service) para acessar o banco
    . remoto: tipicamente REST API ou RPC API
  - Firebase com BaaS (Back-end as a Service)
    . Firebase console
    . Build / Realtime database
    . Copiar URL da API
  - Requisições REST
    . VERBO + URL --> AÇÃO
  - Verbos HTTP
    . GET: obter dados
    . POST: inserir dados
    . PATCH: atualizar dados (objeto inteiro)
    . PUT: atualizar dados (parte do objeto)
    . DELETE: remover dados

22. Requisições POST
  - Instalar pacote http

23. Futures
  - Codificação assíncrona
